name: rmlint Alpine build
on:
  workflow_dispatch:
jobs:
  package_and_update:
    permissions: write-all
    runs-on: ubuntu-latest
    container:
      image: alpine:latest
      options: --privileged
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install build dependencies
        run: |
          echo "http://dl-cdn.alpinelinux.org/alpine/v3.22/main" > /etc/apk/repositories
          echo "http://dl-cdn.alpinelinux.org/alpine/v3.22/community" >> /etc/apk/repositories
          apk update

          apk add --no-cache git scons pkgconf gettext build-base jq

      - name: Install optional dependencies for more features
        run: |
          apk add --no-cache elfutils-dev glib-dev util-linux-dev json-glib-dev

      - name: Install optional dependencies for building documentation
        run: |
          apk add --no-cache python3 py3-sphinx 
          # py3-sphinx-bootstrap-theme

      - name: Install optional dependencies for the GUI
        run: |
          apk add --no-cache py3-setuptools py3-cairo py3-gobject3 gtk+3.0 polkit librsvg py3-colorlog

      - name: Install optional dependencies for tests
        run: |
          apk add --no-cache py3-pytest py3-psutil
          apk add --no-cache py3-pip
          pip install --break-system-packages sphinx-bootstrap-theme pyxattr
      - name: Build
        run: |
          #!/bin/sh
          # Install build tools
          apk add --no-cache abuild sudo scons git pkgconf gettext fakeroot
          
          # Create builder user
          adduser -D builder
          
          # Prepare builder home
          mkdir -p /home/builder/src
          mkdir -p /home/builder/.abuild
          chown -R builder:builder /home/builder
          
          # Generate abuild key as root, then move to builder home
          sudo abuild-keygen -a -i -n
          mv /root/.abuild/* /home/builder/.abuild/
          chown -R builder:builder /home/builder/.abuild
          
          # Fetch latest rmlint release
          tag=$(curl -s https://api.github.com/repos/sahib/rmlint/releases/latest | jq -r .tag_name)
          version="${tag#v}"
          echo "TAG=$tag"
          
          # Clone source
          git clone --branch "$tag" --depth 1 https://github.com/sahib/rmlint.git /home/builder/src/rmlint
          chown -R builder:builder /home/builder/src/rmlint
          
          # Create APKBUILD
          cat > /home/builder/src/rmlint/APKBUILD <<EOF
          # Maintainer: Your Name <you@example.com>
          pkgname=rmlint
          pkgver=$version
          pkgrel=0
          pkgdesc="rmlint compiled from source with GUI"
          url="https://github.com/sahib/rmlint"
          arch="x86_64"
          license="GPL-3.0-or-later"
          depends="gtk+3.0 py3-gobject3 py3-cairo"
          makedepends="scons git pkgconf gettext"
          source="https://github.com/sahib/rmlint/archive/refs/tags/v\$pkgver.tar.gz"
          
          build() {
              cd "\$srcdir/rmlint-\$pkgver"
              scons config
          }
          
          package() {
              cd "\$srcdir/rmlint-\$pkgver"
              scons --prefix="\$pkgdir/usr" install
          }
          EOF
          
          # Build the package as builder
          sudo -u builder bash -c "cd /home/builder/src/rmlint && abuild -r"
          
          # Locate the resulting APK
          apk_file=$(find /home/builder/packages/ -name "*.apk" | head -n1)
          echo "APK_FILE=$apk_file"
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ env.TAG }}
          make_latest: true
          files: ${{ env.APK_FILE }}
